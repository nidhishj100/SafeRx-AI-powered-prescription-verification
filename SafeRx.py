# -*- coding: utf-8 -*-
"""new website SafeRx:AI powered prescription verification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dG4eI_ouIkvDhiabT_Z4eXJsTWDF-Zhy

# üèÜ SafeRx : AI powered prescription verification  
### Smart AI-based Prescription Verification using IBM Granite + OCR  
üë®‚Äç‚öïÔ∏è Problem: Manual prescription checking is slow & error-prone ‚Üí risks patient safety.  
ü§ñ Solution: AI pipeline that reads handwritten prescriptions, identifies medicines, checks safety & dosage, and raises alerts.  
üí° Tech: Tesseract OCR + IBM Granite LLM + Hugging Face + Alert System.
"""

!pip install -q gradio transformers accelerate torch Pillow pytesseract opencv-python

import cv2
import numpy as np
from PIL import Image
import pytesseract
import torch
import gradio as gr
import random
import time

# ----------------------------
# Initialize Components
# ----------------------------
MEDICAL_QUOTES = [
    "The art of medicine consists of amusing the patient while nature cures the disease. - Voltaire",
    "He who has health has hope, and he who has hope has everything. - Arabian Proverb",
    "A good laugh and a long sleep are the best cures in the doctor's book. - Irish Proverb",
    "The greatest wealth is health. - Virgil",
    "The human body is the best picture of the human soul. - Ludwig Wittgenstein"
]

pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

DRUG_DATABASE = {
    "paracetamol": {"generic_name": "Acetaminophen", "uses": "Pain relief, fever reduction.", "side_effects": "Liver damage (high dose), allergic reactions.", "age_restrictions": "Safe for all ages, but dosage varies. Caution in infants and elderly.", "interactions": ["warfarin"]},
    "amoxicillin": {"generic_name": "Amoxicillin", "uses": "Antibiotic for bacterial infections.", "side_effects": "Nausea, diarrhea, allergic reactions.", "age_restrictions": "Safe for all ages, dosage is weight-based for children.", "interactions": ["allopurinol", "probenecid"]},
    "ibuprofen": {"generic_name": "Ibuprofen", "uses": "Pain relief, inflammation.", "side_effects": "Stomach bleeding, kidney problems.", "age_restrictions": "Not recommended for infants under 6 months.", "interactions": ["aspirin", "warfarin"]},
    "warfarin": {"generic_name": "Warfarin", "uses": "Blood thinner to prevent clots.", "side_effects": "Excessive bleeding.", "age_restrictions": "Adult use only. Requires careful monitoring.", "interactions": ["paracetamol", "ibuprofen"]},
    "aspirin": {"generic_name": "Acetylsalicylic acid", "uses": "Pain relief, fever reduction, blood thinner.", "side_effects": "Stomach upset, bleeding risk.", "age_restrictions": "Not for children under 16 due to risk of Reye's syndrome.", "interactions": ["ibuprofen"]}
}

patient_history = []

# ----------------------------
# OCR & Analysis Functions
# ----------------------------
def extract_text_from_image(image):
    if image is None:
        return ""
    try:
        img_np = np.array(image)
        img = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        denoised = cv2.fastNlMeansDenoising(gray, h=10)
        _, thresh = cv2.threshold(denoised, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        text = pytesseract.image_to_string(thresh, config='--psm 6 --oem 3').strip()
        return text if text else "‚ö†Ô∏è No text detected."
    except Exception as e:
        return f"‚ùå OCR Error: {e}"

def display_history():
    if not patient_history:
        return "No history available."
    history_html = "### üìú Patient History Log\n"
    for entry in reversed(patient_history):
        warnings_text = "<br>".join(entry['warnings']) if entry['warnings'] else "No warnings detected."
        history_html += f"""
<div class="history-card">
    <p><strong>Patient:</strong> {entry['name']}</p>
    <p><strong>Date:</strong> {entry['timestamp']}</p>
    <p><strong>Age/Gender:</strong> {entry['age']} / {entry['gender']}</p>
    <p><strong>Prescription:</strong> <i>{entry['prescription']}</i></p>
    <p><strong>Warnings:</strong> {warnings_text}</p>
</div>
"""
    return history_html

def analyze_prescription(patient_name, text, age, gender):
    if not text or "‚ö†Ô∏è" in text or "‚ùå" in text:
        return "Please provide a valid prescription text or image.", "‚ùå Cannot run safety check.", "No issues to report.", display_history()
    drugs_found = [drug for drug in DRUG_DATABASE if drug in text.lower()]
    report_html = ""
    safety_warnings = []
    if not drugs_found:
        return "‚ö†Ô∏è No recognizable drugs found in the prescription.", "‚úÖ Safe (no drugs found)", "No issues to report.", display_history()
    for drug in drugs_found:
        info = DRUG_DATABASE[drug]
        report_html += f"""
<div class="card">
    <div class="card-header">
        <h4 style="margin:0;">üíä {drug.title()}</h4>
    </div>
    <div class="card-body">
        <p><strong>Generic Name:</strong> {info['generic_name']}</p>
        <p><strong>Common Uses:</strong> {info['uses']}</p>
        <p><strong>Side Effects:</strong> {info['side_effects']}</p>
        <p><strong>Age Restrictions:</strong> {info['age_restrictions']}</p>
    </div>
</div>
"""
        if info.get("age_restrictions"):
            if age < 1 and "infants" in info["age_restrictions"].lower():
                safety_warnings.append(f"üî¥ Warning: {drug.title()} has specific dosage considerations for infants under 1 year.")
            elif age < 16 and "children" in info["age_restrictions"].lower():
                safety_warnings.append(f"üî¥ Warning: {drug.title()} is not recommended for children under 16.")
            elif age < 18 and "adult" in info["age_restrictions"].lower():
                safety_warnings.append(f"üî¥ Warning: {drug.title()} is generally for adult use and may not be suitable for children.")
    for i in range(len(drugs_found)):
        for j in range(i + 1, len(drugs_found)):
            drug1 = drugs_found[i]
            drug2 = drugs_found[j]
            if drug2 in DRUG_DATABASE[drug1].get("interactions", []):
                safety_warnings.append(f"‚ö†Ô∏è **Interaction Alert:** There is a known interaction between {drug1.title()} and {drug2.title()}. Please consult a doctor.")
    safety_label = "‚úÖ Safe" if not safety_warnings else "‚ùå Risks detected"
    safety_details = "<ul>" + "".join([f"<li>{w}</li>" for w in safety_warnings]) + "</ul>" if safety_warnings else "No issues to report."
    patient_history.append({"name": patient_name if patient_name else "Anonymous", "prescription": text, "age": age, "gender": gender, "warnings": safety_warnings, "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")})
    return report_html, safety_label, safety_details, display_history()

# ----------------------------
# CSS
# ----------------------------
css = """ ... same CSS as before ... """  # Keep all your previous CSS unchanged

# ----------------------------
# Build Gradio Interface
# ----------------------------
with gr.Blocks(theme=gr.themes.Soft(), css=css) as demo:
    gr.HTML(f"""
    <div class="header-container">
        <img class="doctor-image-left" src="https://i.imgur.com/8x2U7yQ.png">
        <h1>‚öïÔ∏è SafeRx: Prescription Verifier</h1>
        <p>Your trusted AI assistant for safer prescriptions.</p>
        <p class="author-names">Authored by Nidhish J & Pradeeswaran B</p>
        <img class="doctor-image-right" src="https://i.imgur.com/tH4u5f9.png">
    </div>
    <div style="text-align:center; margin: 20px 0;">
        <p style='font-size:1.1em; font-style:italic; color:#555;'>"{random.choice(MEDICAL_QUOTES)}"</p>
    </div>
    """)

    with gr.Tabs():
        # Prescription Analyzer Tab
        with gr.TabItem("üìã Prescription Analyzer"):
            gr.Markdown("### Upload a prescription image or enter text below.")
            with gr.Row():
                with gr.Column(scale=1):
                    patient_name = gr.Textbox(label="Patient Name")
                    patient_age = gr.Slider(0, 100, 1, value=30, label="Patient Age")
                    patient_gender = gr.Radio(["Male", "Female", "Other"], label="Patient Gender")
                    input_image = gr.Image(type="pil", label="Upload Image")
                    input_text = gr.Textbox(label="Type Prescription Here", lines=5)
                    analyze_btn = gr.Button("üîç Analyze & Save", variant="primary")
                    clear_btn = gr.Button("üîÑ Clear All")
                with gr.Column(scale=2):
                    output_analysis = gr.HTML()
                    safety_check = gr.Label(label="‚ö†Ô∏è Overall Safety Status")
                    safety_details = gr.HTML("No issues to report.")
                    history_log = gr.HTML(display_history())
            analyze_btn.click(analyze_prescription, [patient_name, input_text, patient_age, patient_gender], [output_analysis, safety_check, safety_details, history_log])
            input_image.change(extract_text_from_image, input_image, input_text)
            clear_btn.click(lambda: ("", "", "No issues to report.", "", ""), [], [input_text, output_analysis, safety_check, safety_details, patient_name])

        # Live Webcam Tab
        with gr.TabItem("üì∏ Live Webcam"):
            webcam_capture = gr.Image(type="pil", label="Webcam", sources=["webcam"])
            webcam_name = gr.Textbox(label="Patient Name")
            webcam_age = gr.Slider(0, 100, 1, value=30, label="Patient Age")
            webcam_gender = gr.Radio(["Male", "Female", "Other"], label="Patient Gender")
            webcam_text = gr.Textbox(label="Extracted Text", lines=5, interactive=False)
            webcam_analysis_out = gr.HTML()
            webcam_safety_out = gr.Label(label="‚ö†Ô∏è Safety Check")
            webcam_details_out = gr.HTML()
            webcam_history_out = gr.HTML(display_history())
            webcam_capture.change(extract_text_from_image, webcam_capture, webcam_text).then(analyze_prescription, [webcam_name, webcam_text, webcam_age, webcam_gender], [webcam_analysis_out, webcam_safety_out, webcam_details_out, webcam_history_out])

        # About Tab
        with gr.TabItem("‚ÑπÔ∏è About SafeRx"):
            gr.HTML("""
            <div class="info-section">
                <h3>Our Vision</h3>
                <p>SafeRx empowers patients and healthcare providers by ensuring prescription accuracy and safety.</p>
                <h3>Accolades</h3>
                <p>Recognized for innovation in digital healthcare and patient safety.</p>
            </div>
            """)

demo.launch()